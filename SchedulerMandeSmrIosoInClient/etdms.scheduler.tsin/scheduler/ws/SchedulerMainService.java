
package scheduler.ws;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import javax.xml.namespace.QName;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceException;
import javax.xml.ws.WebServiceFeature;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;

import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import utils.AES;

/**
 * This class was generated by the JAX-WS RI. JAX-WS RI 2.2.11-b150616.1732
 * Generated source version: 2.2
 *
 */
@WebServiceClient(name = "SchedulerMainService", targetNamespace = "http://ws.scheduler/")
public class SchedulerMainService extends Service {

	private final static URL SCHEDULERMAINSERVICE_WSDL_LOCATION;
	private final static WebServiceException SCHEDULERMAINSERVICE_EXCEPTION;
	private final static QName SCHEDULERMAINSERVICE_QNAME = new QName("http://ws.scheduler/", "SchedulerMainService");

	// static {
	// URL url = null;
	// WebServiceException e = null;
	// try {
	// url =
	// new
	// URL("http://idphmbpn-adet01:7002/SchedulerWS-Scheduler-context-root/SchedulerMainPort?WSDL#%7Bhttp%3A%2F%2Fws.scheduler%2F%7DSchedulerMainService");
	// } catch (MalformedURLException ex) {
	// e = new WebServiceException(ex);
	// }
	// SCHEDULERMAINSERVICE_WSDL_LOCATION = url;
	// SCHEDULERMAINSERVICE_EXCEPTION = e;
	// }
	static {
		URL url = null;
		WebServiceException e = null;
		String wsdlUrl = getData("select value from etdms_parameter where key = 'SCHEDULERWS_URL'");
		try {
			url = new URL(wsdlUrl);
		} catch (MalformedURLException ex) {
			e = new WebServiceException(ex);
		}
		SCHEDULERMAINSERVICE_WSDL_LOCATION = url;
		SCHEDULERMAINSERVICE_EXCEPTION = e;
	}

	public static Connection getConnection() throws Exception, NullPointerException {
		String host = null;
		String port = null;
		String service = null;
		String username = null;
		String password = null;
		String driver = "oracle.jdbc.driver.OracleDriver";
		DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		DocumentBuilder builder = null;
		try {
			builder = factory.newDocumentBuilder();
		} catch (ParserConfigurationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		Document doc = null;
		try {
			doc = builder.parse("D:/MANDe/Scheduler/MANDeServices/Config/db_conn.config");
		} catch (SAXException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		XPathFactory xPathfactory = XPathFactory.newInstance();
		XPath xpath = xPathfactory.newXPath();
		XPathExpression expr = null;
		try {
			expr = xpath.compile("//configuration/appSettings/add[@value]");
		} catch (XPathExpressionException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		NodeList nl = (NodeList) expr.evaluate(doc, XPathConstants.NODESET);

		for (int i = 0; i < nl.getLength(); i++) {
			Node currentItem = nl.item(i);
			String key = currentItem.getAttributes().getNamedItem("key").getNodeValue();
			String value = currentItem.getAttributes().getNamedItem("value").getNodeValue();
			if (key.equals("db_username")) {
				username = value;
			}
			if (key.equals("db_password")) {
				password = value;
				AES aes = new AES();
				password = aes.decrypt(password, "ETDMS_DEV");
			}
			if (key.equals("db_port")) {
				port = value;
			}
			if (key.equals("db_host")) {
				host = value;
			}
			if (key.equals("db_service")) {
				service = value;
			}
		}
		Class.forName(driver);
		String url = "jdbc:oracle:thin:@//" + host + ":" + port + "/" + service;
		Connection conn = DriverManager.getConnection(url, username, password);

		System.out.println("==============Connection===============");
		return conn;
	}

	public static String testConnection(String schema, String password, String host, String port, String service) {
		String DB_URL = "jdbc:oracle:thin:@//" + host + ":" + port + "/" + service;
		String USER = schema;
		String PASS = password;
		String result = null;

		Connection conn = null;
		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");
			System.out.println("Connecting to database...");
			conn = DriverManager.getConnection(DB_URL, USER, PASS);

			result = "test connection success";
			System.out.println("test connection success");
		} catch (Exception e) {
			result = "test connection failed";
			System.out.println("test connection failed");
			e.printStackTrace();

		} finally {
			if (conn != null) {
				try {
					conn.close();
				} catch (SQLException e) {
					// ignore
				}
			}
		}
		return result;
	}

	public static String getData(String query) {
		Connection con = null;
		String data = "-";
		Statement stmt = null;
		try {
			con = getConnection();
			stmt = con.createStatement();
			ResultSet rs = stmt.executeQuery(query);
			while (rs.next()) {
				if (rs.getString(1) == null)
					data = rs.getString(1);
				else
					data = rs.getString(1).trim();
			}
			rs.close();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {

			try {
				if (stmt != null)
					stmt.close();
			} catch (SQLException e) {
			}
			try {
				if (con != null)
					con.close();
			} catch (SQLException e) {
			}

		}
		return data;
	}

	public SchedulerMainService() {
		super(__getWsdlLocation(), SCHEDULERMAINSERVICE_QNAME);
	}

	public SchedulerMainService(WebServiceFeature... features) {
		super(__getWsdlLocation(), SCHEDULERMAINSERVICE_QNAME, features);
	}

	public SchedulerMainService(URL wsdlLocation) {
		super(wsdlLocation, SCHEDULERMAINSERVICE_QNAME);
	}

	public SchedulerMainService(URL wsdlLocation, WebServiceFeature... features) {
		super(wsdlLocation, SCHEDULERMAINSERVICE_QNAME, features);
	}

	public SchedulerMainService(URL wsdlLocation, QName serviceName) {
		super(wsdlLocation, serviceName);
	}

	public SchedulerMainService(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
		super(wsdlLocation, serviceName, features);
	}

	/**
	 *
	 * @return returns SchedulerMain
	 */
	@WebEndpoint(name = "SchedulerMainPort")
	public SchedulerMain getSchedulerMainPort() {
		return super.getPort(new QName("http://ws.scheduler/", "SchedulerMainPort"), SchedulerMain.class);
	}

	/**
	 *
	 * @param features A list of {@link javax.xml.ws.WebServiceFeature} to configure
	 *                 on the proxy. Supported features not in the
	 *                 <code>features</code> parameter will have their default
	 *                 values.
	 * @return returns SchedulerMain
	 */
	@WebEndpoint(name = "SchedulerMainPort")
	public SchedulerMain getSchedulerMainPort(WebServiceFeature... features) {
		return super.getPort(new QName("http://ws.scheduler/", "SchedulerMainPort"), SchedulerMain.class, features);
	}

	private static URL __getWsdlLocation() {
		if (SCHEDULERMAINSERVICE_EXCEPTION != null) {
			throw SCHEDULERMAINSERVICE_EXCEPTION;
		}
		return SCHEDULERMAINSERVICE_WSDL_LOCATION;
	}

}
