
package scheduler.ws;

import java.util.concurrent.Future;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebService;

import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.AsyncHandler;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.Response;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.11-b150616.1732
 * Generated source version: 2.2
 *
 */
@WebService(name = "SchedulerMain", targetNamespace = "http://ws.scheduler/")
@XmlSeeAlso({ ObjectFactory.class })
public interface SchedulerMain {


    /**
     *
     * @return
     *     returns javax.xml.ws.Response<scheduler.ws.SchedulerTsOutWSResponse>
     */
    @WebMethod(operationName = "schedulerTsOutWS", action = "actionSchedulerTsOutWS")
    @RequestWrapper(localName = "schedulerTsOutWS", targetNamespace = "http://ws.scheduler/",
                    className = "scheduler.ws.SchedulerTsOutWS")
    @ResponseWrapper(localName = "schedulerTsOutWSResponse", targetNamespace = "http://ws.scheduler/",
                     className = "scheduler.ws.SchedulerTsOutWSResponse")
    public Response<SchedulerTsOutWSResponse> schedulerTsOutWSAsync();

    /**
     *
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "schedulerTsOutWS", action = "actionSchedulerTsOutWS")
    @RequestWrapper(localName = "schedulerTsOutWS", targetNamespace = "http://ws.scheduler/",
                    className = "scheduler.ws.SchedulerTsOutWS")
    @ResponseWrapper(localName = "schedulerTsOutWSResponse", targetNamespace = "http://ws.scheduler/",
                     className = "scheduler.ws.SchedulerTsOutWSResponse")
    public Future<?> schedulerTsOutWSAsync(@WebParam(name = "asyncHandler", targetNamespace = "")
                                           AsyncHandler<SchedulerTsOutWSResponse> asyncHandler);

    /**
     *
     * @throws SQLException_Exception
     */
    @WebMethod(action = "actionSchedulerTsOutWS")
    @RequestWrapper(localName = "schedulerTsOutWS", targetNamespace = "http://ws.scheduler/",
                    className = "scheduler.ws.SchedulerTsOutWS")
    @ResponseWrapper(localName = "schedulerTsOutWSResponse", targetNamespace = "http://ws.scheduler/",
                     className = "scheduler.ws.SchedulerTsOutWSResponse")
    @Action(input = "actionSchedulerTsOutWS", output = "http://ws.scheduler/SchedulerMain/schedulerTsOutWSResponse",
            fault =
            { @FaultAction(className = SQLException_Exception.class,
                           value = "http://ws.scheduler/SchedulerMain/schedulerTsOutWS/Fault/SQLException") })
    public void schedulerTsOutWS() throws SQLException_Exception;

    /**
     *
     * @param folder
     * @param transmittalHistoryId
     * @return
     *     returns javax.xml.ws.Response<scheduler.ws.SchedulerTsInWSResponse>
     */
    @WebMethod(operationName = "schedulerTsInWS", action = "actionSchedulerTsInWS")
    @RequestWrapper(localName = "schedulerTsInWS", targetNamespace = "http://ws.scheduler/",
                    className = "scheduler.ws.SchedulerTsInWS")
    @ResponseWrapper(localName = "schedulerTsInWSResponse", targetNamespace = "http://ws.scheduler/",
                     className = "scheduler.ws.SchedulerTsInWSResponse")
    public Response<SchedulerTsInWSResponse> schedulerTsInWSAsync(@WebParam(name = "folder", targetNamespace = "")
                                                                  String folder,
                                                                  @WebParam(name = "transmittalHistoryId",
                                                                            targetNamespace = "")
                                                                  String transmittalHistoryId);

    /**
     *
     * @param folder
     * @param asyncHandler
     * @param transmittalHistoryId
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "schedulerTsInWS", action = "actionSchedulerTsInWS")
    @RequestWrapper(localName = "schedulerTsInWS", targetNamespace = "http://ws.scheduler/",
                    className = "scheduler.ws.SchedulerTsInWS")
    @ResponseWrapper(localName = "schedulerTsInWSResponse", targetNamespace = "http://ws.scheduler/",
                     className = "scheduler.ws.SchedulerTsInWSResponse")
    public Future<?> schedulerTsInWSAsync(@WebParam(name = "folder", targetNamespace = "") String folder,
                                          @WebParam(name = "transmittalHistoryId", targetNamespace = "")
                                          String transmittalHistoryId,
                                          @WebParam(name = "asyncHandler", targetNamespace = "")
                                          AsyncHandler<SchedulerTsInWSResponse> asyncHandler);

    /**
     *
     * @param folder
     * @param transmittalHistoryId
     * @throws SQLException_Exception
     * @throws InvalidFormatException_Exception
     * @throws ParserConfigurationException_Exception
     * @throws SAXException_Exception
     * @throws ParseException_Exception
     * @throws IOException_Exception
     */
    @WebMethod(action = "actionSchedulerTsInWS")
    @RequestWrapper(localName = "schedulerTsInWS", targetNamespace = "http://ws.scheduler/",
                    className = "scheduler.ws.SchedulerTsInWS")
    @ResponseWrapper(localName = "schedulerTsInWSResponse", targetNamespace = "http://ws.scheduler/",
                     className = "scheduler.ws.SchedulerTsInWSResponse")
    @Action(input = "actionSchedulerTsInWS", output = "http://ws.scheduler/SchedulerMain/schedulerTsInWSResponse",
            fault =
            { @FaultAction(className = SQLException_Exception.class,
                           value = "http://ws.scheduler/SchedulerMain/schedulerTsInWS/Fault/SQLException"),
              @FaultAction(className = ParseException_Exception.class,
                           value = "http://ws.scheduler/SchedulerMain/schedulerTsInWS/Fault/ParseException"),
              @FaultAction(className = ParserConfigurationException_Exception.class,
                           value =
                           "http://ws.scheduler/SchedulerMain/schedulerTsInWS/Fault/ParserConfigurationException"),
              @FaultAction(className = SAXException_Exception.class,
                           value = "http://ws.scheduler/SchedulerMain/schedulerTsInWS/Fault/SAXException"),
              @FaultAction(className = IOException_Exception.class,
                           value = "http://ws.scheduler/SchedulerMain/schedulerTsInWS/Fault/IOException"),
              @FaultAction(className = InvalidFormatException_Exception.class,
                           value = "http://ws.scheduler/SchedulerMain/schedulerTsInWS/Fault/InvalidFormatException")
        })
    public void schedulerTsInWS(@WebParam(name = "folder", targetNamespace = "") String folder,
                                @WebParam(name = "transmittalHistoryId", targetNamespace = "")
                                String transmittalHistoryId) throws IOException_Exception,
                                                                    InvalidFormatException_Exception,
                                                                    ParseException_Exception,
                                                                    ParserConfigurationException_Exception,
                                                                    SAXException_Exception, SQLException_Exception;

    /**
     *
     * @param jobExecutor
     * @return
     *     returns javax.xml.ws.Response<scheduler.ws.SchedulerExportRequestWSResponse>
     */
    @WebMethod(operationName = "schedulerExportRequestWS", action = "actionSchedulerExportRequestWS")
    @RequestWrapper(localName = "schedulerExportRequestWS", targetNamespace = "http://ws.scheduler/",
                    className = "scheduler.ws.SchedulerExportRequestWS")
    @ResponseWrapper(localName = "schedulerExportRequestWSResponse", targetNamespace = "http://ws.scheduler/",
                     className = "scheduler.ws.SchedulerExportRequestWSResponse")
    public Response<SchedulerExportRequestWSResponse> schedulerExportRequestWSAsync(@WebParam(name = "jobExecutor",
                                                                                              targetNamespace = "")
                                                                                    String jobExecutor);

    /**
     *
     * @param jobExecutor
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "schedulerExportRequestWS", action = "actionSchedulerExportRequestWS")
    @RequestWrapper(localName = "schedulerExportRequestWS", targetNamespace = "http://ws.scheduler/",
                    className = "scheduler.ws.SchedulerExportRequestWS")
    @ResponseWrapper(localName = "schedulerExportRequestWSResponse", targetNamespace = "http://ws.scheduler/",
                     className = "scheduler.ws.SchedulerExportRequestWSResponse")
    public Future<?> schedulerExportRequestWSAsync(@WebParam(name = "jobExecutor", targetNamespace = "")
                                                   String jobExecutor,
                                                   @WebParam(name = "asyncHandler", targetNamespace = "")
                                                   AsyncHandler<SchedulerExportRequestWSResponse> asyncHandler);

    /**
     *
     * @param jobExecutor
     * @throws SQLException_Exception
     */
    @WebMethod(action = "actionSchedulerExportRequestWS")
    @RequestWrapper(localName = "schedulerExportRequestWS", targetNamespace = "http://ws.scheduler/",
                    className = "scheduler.ws.SchedulerExportRequestWS")
    @ResponseWrapper(localName = "schedulerExportRequestWSResponse", targetNamespace = "http://ws.scheduler/",
                     className = "scheduler.ws.SchedulerExportRequestWSResponse")
    @Action(input = "actionSchedulerExportRequestWS",
            output = "http://ws.scheduler/SchedulerMain/schedulerExportRequestWSResponse",
            fault =
            { @FaultAction(className = SQLException_Exception.class,
                           value = "http://ws.scheduler/SchedulerMain/schedulerExportRequestWS/Fault/SQLException")
        })
    public void schedulerExportRequestWS(@WebParam(name = "jobExecutor", targetNamespace = "")
                                         String jobExecutor) throws SQLException_Exception;

    /**
     *
     * @return
     *     returns javax.xml.ws.Response<scheduler.ws.SchedulerRemoveTempFileWSResponse>
     */
    @WebMethod(operationName = "schedulerRemoveTempFileWS", action = "actionSchedulerRemoveTempFileWS")
    @RequestWrapper(localName = "schedulerRemoveTempFileWS", targetNamespace = "http://ws.scheduler/",
                    className = "scheduler.ws.SchedulerRemoveTempFileWS")
    @ResponseWrapper(localName = "schedulerRemoveTempFileWSResponse", targetNamespace = "http://ws.scheduler/",
                     className = "scheduler.ws.SchedulerRemoveTempFileWSResponse")
    public Response<SchedulerRemoveTempFileWSResponse> schedulerRemoveTempFileWSAsync();

    /**
     *
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "schedulerRemoveTempFileWS", action = "actionSchedulerRemoveTempFileWS")
    @RequestWrapper(localName = "schedulerRemoveTempFileWS", targetNamespace = "http://ws.scheduler/",
                    className = "scheduler.ws.SchedulerRemoveTempFileWS")
    @ResponseWrapper(localName = "schedulerRemoveTempFileWSResponse", targetNamespace = "http://ws.scheduler/",
                     className = "scheduler.ws.SchedulerRemoveTempFileWSResponse")
    public Future<?> schedulerRemoveTempFileWSAsync(@WebParam(name = "asyncHandler", targetNamespace = "")
                                                    AsyncHandler<SchedulerRemoveTempFileWSResponse> asyncHandler);

    /**
     *
     * @throws SQLException_Exception
     */
    @WebMethod(action = "actionSchedulerRemoveTempFileWS")
    @RequestWrapper(localName = "schedulerRemoveTempFileWS", targetNamespace = "http://ws.scheduler/",
                    className = "scheduler.ws.SchedulerRemoveTempFileWS")
    @ResponseWrapper(localName = "schedulerRemoveTempFileWSResponse", targetNamespace = "http://ws.scheduler/",
                     className = "scheduler.ws.SchedulerRemoveTempFileWSResponse")
    @Action(input = "actionSchedulerRemoveTempFileWS",
            output = "http://ws.scheduler/SchedulerMain/schedulerRemoveTempFileWSResponse",
            fault =
            { @FaultAction(className = SQLException_Exception.class,
                           value = "http://ws.scheduler/SchedulerMain/schedulerRemoveTempFileWS/Fault/SQLException")
        })
    public void schedulerRemoveTempFileWS() throws SQLException_Exception;

}
